/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PCOLicenseParamsFacetInterface extends utils.Interface {
  contractName: "PCOLicenseParamsFacet";
  functions: {
    "getBeneficiary()": FunctionFragment;
    "getBidPeriodLengthInSeconds()": FunctionFragment;
    "getHost()": FunctionFragment;
    "getMinForSalePrice()": FunctionFragment;
    "getPaymentToken()": FunctionFragment;
    "getPenaltyDenominator()": FunctionFragment;
    "getPenaltyNumerator()": FunctionFragment;
    "getPerSecondFeeDenominator()": FunctionFragment;
    "getPerSecondFeeNumerator()": FunctionFragment;
    "getReclaimAuctionLength()": FunctionFragment;
    "initializeParams(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setBeneficiary(address)": FunctionFragment;
    "setBidPeriodLengthInSeconds(uint256)": FunctionFragment;
    "setHost(address)": FunctionFragment;
    "setMinForSalePrice(uint256)": FunctionFragment;
    "setPaymentToken(address)": FunctionFragment;
    "setPenaltyDenominator(uint256)": FunctionFragment;
    "setPenaltyNumerator(uint256)": FunctionFragment;
    "setPerSecondFeeDenominator(uint256)": FunctionFragment;
    "setPerSecondFeeNumerator(uint256)": FunctionFragment;
    "setReclaimAuctionLength(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBidPeriodLengthInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getHost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMinForSalePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPenaltyDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPenaltyNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPerSecondFeeDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPerSecondFeeNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReclaimAuctionLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeParams",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBidPeriodLengthInSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setHost", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMinForSalePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPenaltyDenominator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPenaltyNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerSecondFeeDenominator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerSecondFeeNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReclaimAuctionLength",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidPeriodLengthInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinForSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPenaltyDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPenaltyNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerSecondFeeDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerSecondFeeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReclaimAuctionLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBidPeriodLengthInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinForSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPenaltyDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPenaltyNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerSecondFeeDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerSecondFeeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReclaimAuctionLength",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PCOLicenseParamsFacet extends BaseContract {
  contractName: "PCOLicenseParamsFacet";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PCOLicenseParamsFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    getBidPeriodLengthInSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getHost(overrides?: CallOverrides): Promise<[string]>;

    getMinForSalePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPaymentToken(overrides?: CallOverrides): Promise<[string]>;

    getPenaltyDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPenaltyNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPerSecondFeeDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPerSecondFeeNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReclaimAuctionLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    initializeParams(
      beneficiary: string,
      paymentToken: string,
      host: string,
      perSecondFeeNumerator: BigNumberish,
      perSecondFeeDenominator: BigNumberish,
      penaltyNumerator: BigNumberish,
      penaltyDenominator: BigNumberish,
      bidPeriodLengthInSeconds: BigNumberish,
      reclaimAuctionLength: BigNumberish,
      minForSalePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBeneficiary(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBidPeriodLengthInSeconds(
      bidPeriodLengthInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHost(
      host: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinForSalePrice(
      minForSalePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentToken(
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPenaltyDenominator(
      penaltyDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPenaltyNumerator(
      penaltyNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerSecondFeeDenominator(
      perSecondFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerSecondFeeNumerator(
      perSecondFeeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReclaimAuctionLength(
      reclaimAuctionLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getBeneficiary(overrides?: CallOverrides): Promise<string>;

  getBidPeriodLengthInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  getHost(overrides?: CallOverrides): Promise<string>;

  getMinForSalePrice(overrides?: CallOverrides): Promise<BigNumber>;

  getPaymentToken(overrides?: CallOverrides): Promise<string>;

  getPenaltyDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  getPenaltyNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  getPerSecondFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  getPerSecondFeeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  getReclaimAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

  initializeParams(
    beneficiary: string,
    paymentToken: string,
    host: string,
    perSecondFeeNumerator: BigNumberish,
    perSecondFeeDenominator: BigNumberish,
    penaltyNumerator: BigNumberish,
    penaltyDenominator: BigNumberish,
    bidPeriodLengthInSeconds: BigNumberish,
    reclaimAuctionLength: BigNumberish,
    minForSalePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBeneficiary(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBidPeriodLengthInSeconds(
    bidPeriodLengthInSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHost(
    host: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinForSalePrice(
    minForSalePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentToken(
    paymentToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPenaltyDenominator(
    penaltyDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPenaltyNumerator(
    penaltyNumerator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerSecondFeeDenominator(
    perSecondFeeDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerSecondFeeNumerator(
    perSecondFeeNumerator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReclaimAuctionLength(
    reclaimAuctionLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBeneficiary(overrides?: CallOverrides): Promise<string>;

    getBidPeriodLengthInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    getHost(overrides?: CallOverrides): Promise<string>;

    getMinForSalePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPaymentToken(overrides?: CallOverrides): Promise<string>;

    getPenaltyDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    getPenaltyNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    getPerSecondFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    getPerSecondFeeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    getReclaimAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

    initializeParams(
      beneficiary: string,
      paymentToken: string,
      host: string,
      perSecondFeeNumerator: BigNumberish,
      perSecondFeeDenominator: BigNumberish,
      penaltyNumerator: BigNumberish,
      penaltyDenominator: BigNumberish,
      bidPeriodLengthInSeconds: BigNumberish,
      reclaimAuctionLength: BigNumberish,
      minForSalePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBeneficiary(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBidPeriodLengthInSeconds(
      bidPeriodLengthInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHost(host: string, overrides?: CallOverrides): Promise<void>;

    setMinForSalePrice(
      minForSalePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentToken(
      paymentToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPenaltyDenominator(
      penaltyDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPenaltyNumerator(
      penaltyNumerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerSecondFeeDenominator(
      perSecondFeeDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerSecondFeeNumerator(
      perSecondFeeNumerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReclaimAuctionLength(
      reclaimAuctionLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    getBidPeriodLengthInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    getHost(overrides?: CallOverrides): Promise<BigNumber>;

    getMinForSalePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPaymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    getPenaltyDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    getPenaltyNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    getPerSecondFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    getPerSecondFeeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    getReclaimAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

    initializeParams(
      beneficiary: string,
      paymentToken: string,
      host: string,
      perSecondFeeNumerator: BigNumberish,
      perSecondFeeDenominator: BigNumberish,
      penaltyNumerator: BigNumberish,
      penaltyDenominator: BigNumberish,
      bidPeriodLengthInSeconds: BigNumberish,
      reclaimAuctionLength: BigNumberish,
      minForSalePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBeneficiary(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBidPeriodLengthInSeconds(
      bidPeriodLengthInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHost(
      host: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinForSalePrice(
      minForSalePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentToken(
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPenaltyDenominator(
      penaltyDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPenaltyNumerator(
      penaltyNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerSecondFeeDenominator(
      perSecondFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerSecondFeeNumerator(
      perSecondFeeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReclaimAuctionLength(
      reclaimAuctionLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBeneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBidPeriodLengthInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinForSalePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPenaltyDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPenaltyNumerator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPerSecondFeeDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPerSecondFeeNumerator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReclaimAuctionLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeParams(
      beneficiary: string,
      paymentToken: string,
      host: string,
      perSecondFeeNumerator: BigNumberish,
      perSecondFeeDenominator: BigNumberish,
      penaltyNumerator: BigNumberish,
      penaltyDenominator: BigNumberish,
      bidPeriodLengthInSeconds: BigNumberish,
      reclaimAuctionLength: BigNumberish,
      minForSalePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBeneficiary(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBidPeriodLengthInSeconds(
      bidPeriodLengthInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHost(
      host: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinForSalePrice(
      minForSalePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentToken(
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPenaltyDenominator(
      penaltyDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPenaltyNumerator(
      penaltyNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerSecondFeeDenominator(
      perSecondFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerSecondFeeNumerator(
      perSecondFeeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReclaimAuctionLength(
      reclaimAuctionLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
