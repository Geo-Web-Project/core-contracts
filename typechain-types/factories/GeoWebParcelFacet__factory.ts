/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GeoWebParcelFacet,
  GeoWebParcelFacetInterface,
} from "../GeoWebParcelFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "availabilityIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getLandParcel",
    outputs: [
      {
        internalType: "uint64",
        name: "baseCoordinate",
        type: "uint64",
      },
      {
        internalType: "uint256[]",
        name: "path",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061023f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806331a5ee9c1461003b578063e7feff2e14610098575b600080fd5b610085610049366004610176565b60009182527f1d99a33cbbd99d244d8804dd6e7f77acb60cc0c0934fe2f7b00cabddc4b4b0f86020908152604080842092845291905290205490565b6040519081526020015b60405180910390f35b6100ab6100a6366004610198565b6100b9565b60405161008f9291906101b1565b60008181527f1d99a33cbbd99d244d8804dd6e7f77acb60cc0c0934fe2f7b00cabddc4b4b0f96020908152604080832080546001820180548451818702810187019095528085526060957f1d99a33cbbd99d244d8804dd6e7f77acb60cc0c0934fe2f7b00cabddc4b4b0f89567ffffffffffffffff9094169391839183018282801561016457602002820191906000526020600020905b815481526020019060010190808311610150575b50505050509050935093505050915091565b6000806040838503121561018957600080fd5b50508035926020909101359150565b6000602082840312156101aa57600080fd5b5035919050565b60006040820167ffffffffffffffff851683526020604081850152818551808452606086019150828701935060005b818110156101fc578451835293830193918301916001016101e0565b509097965050505050505056fea2646970667358221220954d2407aa5a56966b93e7db9d7be7b4f877f246ae987331de789e7a5869589a64736f6c634300080e0033";

type GeoWebParcelFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GeoWebParcelFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GeoWebParcelFacet__factory extends ContractFactory {
  constructor(...args: GeoWebParcelFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "GeoWebParcelFacet";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GeoWebParcelFacet> {
    return super.deploy(overrides || {}) as Promise<GeoWebParcelFacet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GeoWebParcelFacet {
    return super.attach(address) as GeoWebParcelFacet;
  }
  connect(signer: Signer): GeoWebParcelFacet__factory {
    return super.connect(signer) as GeoWebParcelFacet__factory;
  }
  static readonly contractName: "GeoWebParcelFacet";
  public readonly contractName: "GeoWebParcelFacet";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GeoWebParcelFacetInterface {
    return new utils.Interface(_abi) as GeoWebParcelFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GeoWebParcelFacet {
    return new Contract(address, _abi, signerOrProvider) as GeoWebParcelFacet;
  }
}
